{"version":3,"sources":["weatherApp/MainWeatherApp.js","App.js","serviceWorker.js","index.js"],"names":["api","WeatherApp","useState","query","setQuery","temp","setTemp","display","setDisplay","country","setCountry","city","setCity","weather","setWeather","visible","setVisible","error","setError","styleCity","fontStyle","fontFamily","color","textShadow","className","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","type","value","onChange","e","target","onKeyPress","event","key","axios","get","then","res","console","log","data","main","sys","name","catch","placeholder","style","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Card","backgroundColor","opacity","padding","height","width","position","left","top","justifyContent","transform","borderRadius","boxShadow","fontSize","textAlign","Math","round","UncontrolledAlert","isOpen","fade","toggle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a08c48bd.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport {Input,InputGroupAddon,InputGroupText,InputGroup,Card,UncontrolledAlert} from 'reactstrap';\r\nimport axios from 'axios';\r\nconst api={\r\n    key:\"ab26c70954104259913d70de08071b7f\",\r\n    base:\"https://api.openweathermap.org/data/2.5/\"\r\n}\r\nconst WeatherApp = () => {\r\n    const[query,setQuery]=useState('');\r\n    const[temp,setTemp]=useState('');\r\n    const[display,setDisplay]=useState(false);\r\n    const[country,setCountry]=useState('');\r\n    const[city,setCity]=useState('');\r\n    const[weather,setWeather]=useState('');\r\n    const [visible, setVisible] = useState(true);\r\n    const[error,setError]=useState('');\r\n    const search=(event)=>{\r\n        if(event.key===\"Enter\"){\r\n            axios.get(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n            .then(res=>{\r\n                console.log(res.data);\r\n                setVisible(false);\r\n                setWeather(res.data.weather[0].main)\r\n                setTemp(res.data.main.temp);\r\n                setCountry(res.data.sys.country);\r\n                setCity(res.data.name);\r\n                setDisplay(true);\r\n                setError('');\r\n                setQuery('');\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error,\"Couldn't fetch data\");\r\n                setWeather('')\r\n                setTemp('');\r\n                setCountry('');\r\n                setCity('');\r\n                setDisplay(false);\r\n                setError('');\r\n                setQuery('');\r\n                setVisible(false);\r\n                setError(\"Enter a valid city name\");\r\n            })\r\n        }\r\n    }\r\n    const onDismiss = () => setVisible(false);\r\n    const dateBuilder=(d)=>{\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        const day=days[d.getDay()];\r\n        const date=d.getDate();\r\n        const month=months[d.getMonth()];\r\n        const year=d.getFullYear();\r\n        return `${day}, ${date}-${month}-${year}`;\r\n    }\r\n    const styleCard={\r\n        backgroundColor:\"rgba(245, 245, 245, 1)\",\r\n        opacity:\".5\",\r\n        padding:\"2px\",\r\n        height:\"30vh\",\r\n        width:\"50vw\",\r\n        position:\"absolute\",\r\n        left:\"50%\",\r\n        top:\"60%\",\r\n        justifyContent:\"center\",\r\n        transform:\"translate(-50%,-70%)\",\r\n        borderRadius:\"30px\",\r\n        boxShadow:\"5px 5px rgba(0,0,23,0.2)\"\r\n    }\r\n    const styleText={\r\n        position:\"relative\",\r\n        fontSize:\"80px\",\r\n        color:\"#FBFDFF\",\r\n        textAlign:\"center\",\r\n        textShadow:\" 4px 4px rgba(75,75,75,200)\", \r\n    }\r\n    const styleCity={\r\n        fontStyle:\"bold\",\r\n        fontFamily: \"Open Sans Condensed, sans-serif\",\r\n        color:\"#050606\",\r\n        textShadow:\"1px 1px rgba(0,2,2,0.4)\",\r\n    }\r\n    const styleAlert={\r\n        top:\"20%\",\r\n        position:\"absolute\",\r\n        left:\"50%\",\r\n        transform:\"translate(-60%,-80%)\",\r\n        borderRadius:\"30px\",\r\n    }\r\n    return ( \r\n        <div className={(temp<20)?'app':'app-warm'}>\r\n        <div className={(temp<20)?'container':'container warm'}>\r\n            <section>\r\n            <InputGroup className=\"search-box\">\r\n                <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>City</InputGroupText>\r\n                </InputGroupAddon>\r\n                <Input \r\n                type=\"text\"\r\n                value={query}\r\n                onChange={(e)=>setQuery(e.target.value)}\r\n                onKeyPress={search}\r\n                placeholder=\"Search...\"/>\r\n            </InputGroup>\r\n            <p style={{color:\"red\"}}>{error}</p>\r\n            { display ? \r\n                <div>\r\n                    <div className=\"location\">\r\n                        <h2 style={styleCity}>{city},{country}</h2>\r\n                        <h5 style={styleCity}>{dateBuilder(new Date())}</h5>\r\n                    </div>\r\n                    <Card style={styleCard}>\r\n                        <h1 style={styleText}>{Math.round(temp)}Â°C</h1>\r\n                    </Card>\r\n                    <h5 style={styleCity,{position:\"absolute\",color:\"#fff\",top:\"65%\",left:\"50%\",transform:\"translate(-50%,-50%)\"}}>{weather}</h5>\r\n                </div>\r\n            :\r\n            <div>\r\n                <UncontrolledAlert color=\"info\" style={styleAlert} isOpen={visible} fade={true} toggle={onDismiss}>\r\n                    Enter the city name\r\n                </UncontrolledAlert>\r\n            </div>\r\n            }\r\n            </section>\r\n        </div>\r\n        </div>\r\n     )\r\n}\r\n \r\nexport default WeatherApp;","import React from 'react';\nimport './App.css';\nimport WeatherApp from './weatherApp/MainWeatherApp.js'\nfunction App() {\n  return (\n    <div className=\"App\">\n        <WeatherApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}